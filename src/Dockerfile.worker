# Pull official base image
FROM python:3.9-slim-buster AS base

# Install dependencies
RUN apt-get update \
  # dependencies for building Python packages
  && apt-get install -y build-essential \
  # psycopg2 dependencies
  && apt-get install -y libpq-dev \
  # mayavi,vtk,pyqt5 dependencies
  && apt-get install -yq --no-install-recommends xvfb x11-utils libx11-dev qt5-default \
  # cleaning up unused files
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && rm -rf /var/lib/apt/lists/*

# Add files from the build context to the container temporarily to execute a RUN instruction
# https://docs.docker.com/develop/develop-images/instructions/#add-or-copy
RUN --mount=type=bind,source=worker/requirements.txt,target=/tmp/requirements.txt \
pip install --no-cache-dir --upgrade -r /tmp/requirements.txt

# Enable "headless" mode (no GUI) for Qt
ENV QT_QPA_PLATFORM=offscreen

FROM scratch AS file-system

# Copy files into the container
COPY config.py start_worker.py /app/
COPY database /app/database
COPY utilities /app/utilities
COPY worker /app/worker

FROM base AS production

# Set work directory
WORKDIR /app

# Copy files into the container
COPY --from=file-system /app /app

# Create a non-root user
#RUN adduser --uid 1000 --gid 20 nonroot
#USER nonroot

# Stage to build GRBL simulator from source code
FROM debian:buster-slim AS build
WORKDIR /app

# Install minimal dependencies, clone repositories and build executable
RUN apt-get update -y && apt-get upgrade -y
RUN apt install -y git make gcc
RUN git clone https://github.com/gnea/grbl.git
WORKDIR /app/grbl/grbl
RUN git clone https://github.com/Leandro-Bertoluzzi/grbl-sim.git
WORKDIR /app/grbl/grbl/grbl-sim
RUN git checkout develop
RUN make new

# In case you want to export the generated executable files
FROM scratch AS export-exe
COPY --from=build /app/grbl/grbl/grbl-sim/*.exe ./

FROM base AS development

# Copy executable from build stage
COPY --from=build app/grbl/grbl/grbl-sim/grbl_sim.exe /app/grbl_sim.exe

# Install minimal dependencies
RUN apt-get update -y && apt-get upgrade -y \
    && apt install -y socat

# Set work directory
WORKDIR /app

# Copy files into the container
COPY --from=file-system /app /app

# Move script to create virtual port, to activate later
RUN mv /app/worker/simport.sh /app/simport.sh \
    # Fix line endings
    && sed -i "s/\r//" /app/simport.sh \
    # Ensure execution permissions
    && chmod +x /app/simport.sh
